Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    DOWN
    ELSEIF
    BY
    UPPER
    TO
    RBRACKET
    CHARS
    FI
    LOC
    LPAREN
    ARROW
    OD
    NOTEQUAL
    COMMENT
    RETURNS
    READ
    RETURN
    RPAREN
    RESULT
    NUM
    PRINT
    END
    ASC
    THEN
    LBRACKET
    LENGHT
    REF
    SYN
    IF
    TYPE
    ARRAY
    ABS
    ELSE
    EXIT
    WHILE
    FOR
    PROC
    COLON
    DO
    LOWER

Grammar

Rule 0     S' -> Program
Rule 1     Program -> StatementList
Rule 2     StatementList -> Statement
Rule 3     StatementList -> StatementList Statement
Rule 4     Statement -> DeclarationStatement
Rule 5     DeclarationStatement -> DCL DeclaratioList SEMICOLON
Rule 6     DeclaratioList -> DeclaratioList COMMA Declaration
Rule 7     DeclaratioList -> Declaration
Rule 8     Declaration -> IdentifierList Mode
Rule 9     Declaration -> IdentifierList Mode Initialization
Rule 10    IdentifierList -> IdentifierList COMMA Identifier
Rule 11    IdentifierList -> Identifier
Rule 12    Identifier -> ID
Rule 13    Mode -> ID
Rule 14    Mode -> DiscreteMode
Rule 15    DiscreteMode -> INT
Rule 16    DiscreteMode -> BOOL
Rule 17    DiscreteMode -> CHAR
Rule 18    Initialization -> ATRIB Expression
Rule 19    Expression -> Operand0
Rule 20    Operand0 -> Operand1
Rule 21    Operand0 -> Operand0 Operator1 Operand1
Rule 22    Operand1 -> Operand2
Rule 23    Operand1 -> Operand1 Operator2 Operand2
Rule 24    Operand2 -> Operand3
Rule 25    Operand2 -> Operand2 MUL Operand3
Rule 26    Operand2 -> Operand2 DIV Operand3
Rule 27    Operand2 -> Operand2 MOD Operand3
Rule 28    Operand3 -> MINUS Operand4
Rule 29    Operand3 -> NOT Operand4
Rule 30    Operand3 -> ICONST
Rule 31    Operand4 -> PrimitiveValue
Rule 32    PrimitiveValue -> Literal
Rule 33    Literal -> ICONST
Rule 34    Literal -> FALSE
Rule 35    Literal -> TRUE
Rule 36    Literal -> CHALIT
Rule 37    Literal -> NULL
Rule 38    Literal -> STR
Rule 39    Operator1 -> RelationalOperator
Rule 40    Operator1 -> IN
Rule 41    RelationalOperator -> AND
Rule 42    RelationalOperator -> OR
Rule 43    RelationalOperator -> EQUAL
Rule 44    RelationalOperator -> NEQUAL
Rule 45    RelationalOperator -> MORETHEN
Rule 46    RelationalOperator -> EQMORETHEN
Rule 47    RelationalOperator -> LESSTHEN
Rule 48    RelationalOperator -> EQLESSTHEN
Rule 49    Operator2 -> PLUS
Rule 50    Operator2 -> STRCAT
Rule 51    Operator2 -> MINUS

Terminals, with rules where they appear

ABS                  : 
AND                  : 41
ARRAY                : 
ARROW                : 
ASC                  : 
ATRIB                : 18
BOOL                 : 16
BY                   : 
CHALIT               : 36
CHAR                 : 17
CHARS                : 
COLON                : 
COMMA                : 6 10
COMMENT              : 
DCL                  : 5
DIV                  : 26
DO                   : 
DOWN                 : 
ELSE                 : 
ELSEIF               : 
END                  : 
EQLESSTHEN           : 48
EQMORETHEN           : 46
EQUAL                : 43
EXIT                 : 
FALSE                : 34
FI                   : 
FOR                  : 
ICONST               : 30 33
ID                   : 12 13
IF                   : 
IN                   : 40
INT                  : 15
LBRACKET             : 
LENGHT               : 
LESSTHEN             : 47
LOC                  : 
LOWER                : 
LPAREN               : 
MINUS                : 28 51
MOD                  : 27
MORETHEN             : 45
MUL                  : 25
NEQUAL               : 44
NOT                  : 29
NOTEQUAL             : 
NULL                 : 37
NUM                  : 
OD                   : 
OR                   : 42
PLUS                 : 49
PRINT                : 
PROC                 : 
RBRACKET             : 
READ                 : 
REF                  : 
RESULT               : 
RETURN               : 
RETURNS              : 
RPAREN               : 
SEMICOLON            : 5
STR                  : 38
STRCAT               : 50
SYN                  : 
THEN                 : 
TO                   : 
TRUE                 : 35
TYPE                 : 
UPPER                : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

DeclaratioList       : 5 6
Declaration          : 6 7
DeclarationStatement : 4
DiscreteMode         : 14
Expression           : 18
Identifier           : 10 11
IdentifierList       : 8 9 10
Initialization       : 9
Literal              : 32
Mode                 : 8 9
Operand0             : 19 21
Operand1             : 20 21 23
Operand2             : 22 23 25 26 27
Operand3             : 24 25 26 27
Operand4             : 28 29
Operator1            : 21
Operator2            : 23
PrimitiveValue       : 31
Program              : 0
RelationalOperator   : 39
Statement            : 2 3
StatementList        : 1 3

Parsing method: LALR

state 0

    (0) S' -> . Program
    (1) Program -> . StatementList
    (2) StatementList -> . Statement
    (3) StatementList -> . StatementList Statement
    (4) Statement -> . DeclarationStatement
    (5) DeclarationStatement -> . DCL DeclaratioList SEMICOLON

    DCL             shift and go to state 2

    Program                        shift and go to state 4
    Statement                      shift and go to state 1
    DeclarationStatement           shift and go to state 3
    StatementList                  shift and go to state 5

state 1

    (2) StatementList -> Statement .

    DCL             reduce using rule 2 (StatementList -> Statement .)
    $end            reduce using rule 2 (StatementList -> Statement .)


state 2

    (5) DeclarationStatement -> DCL . DeclaratioList SEMICOLON
    (6) DeclaratioList -> . DeclaratioList COMMA Declaration
    (7) DeclaratioList -> . Declaration
    (8) Declaration -> . IdentifierList Mode
    (9) Declaration -> . IdentifierList Mode Initialization
    (10) IdentifierList -> . IdentifierList COMMA Identifier
    (11) IdentifierList -> . Identifier
    (12) Identifier -> . ID

    ID              shift and go to state 10

    Declaration                    shift and go to state 6
    DeclaratioList                 shift and go to state 7
    IdentifierList                 shift and go to state 8
    Identifier                     shift and go to state 9

state 3

    (4) Statement -> DeclarationStatement .

    DCL             reduce using rule 4 (Statement -> DeclarationStatement .)
    $end            reduce using rule 4 (Statement -> DeclarationStatement .)


state 4

    (0) S' -> Program .



state 5

    (1) Program -> StatementList .
    (3) StatementList -> StatementList . Statement
    (4) Statement -> . DeclarationStatement
    (5) DeclarationStatement -> . DCL DeclaratioList SEMICOLON

    $end            reduce using rule 1 (Program -> StatementList .)
    DCL             shift and go to state 2

    Statement                      shift and go to state 11
    DeclarationStatement           shift and go to state 3

state 6

    (7) DeclaratioList -> Declaration .

    SEMICOLON       reduce using rule 7 (DeclaratioList -> Declaration .)
    COMMA           reduce using rule 7 (DeclaratioList -> Declaration .)


state 7

    (5) DeclarationStatement -> DCL DeclaratioList . SEMICOLON
    (6) DeclaratioList -> DeclaratioList . COMMA Declaration

    SEMICOLON       shift and go to state 12
    COMMA           shift and go to state 13


state 8

    (8) Declaration -> IdentifierList . Mode
    (9) Declaration -> IdentifierList . Mode Initialization
    (10) IdentifierList -> IdentifierList . COMMA Identifier
    (13) Mode -> . ID
    (14) Mode -> . DiscreteMode
    (15) DiscreteMode -> . INT
    (16) DiscreteMode -> . BOOL
    (17) DiscreteMode -> . CHAR

    COMMA           shift and go to state 18
    ID              shift and go to state 15
    INT             shift and go to state 16
    BOOL            shift and go to state 17
    CHAR            shift and go to state 14

    DiscreteMode                   shift and go to state 20
    Mode                           shift and go to state 19

state 9

    (11) IdentifierList -> Identifier .

    COMMA           reduce using rule 11 (IdentifierList -> Identifier .)
    ID              reduce using rule 11 (IdentifierList -> Identifier .)
    INT             reduce using rule 11 (IdentifierList -> Identifier .)
    BOOL            reduce using rule 11 (IdentifierList -> Identifier .)
    CHAR            reduce using rule 11 (IdentifierList -> Identifier .)


state 10

    (12) Identifier -> ID .

    COMMA           reduce using rule 12 (Identifier -> ID .)
    ID              reduce using rule 12 (Identifier -> ID .)
    INT             reduce using rule 12 (Identifier -> ID .)
    BOOL            reduce using rule 12 (Identifier -> ID .)
    CHAR            reduce using rule 12 (Identifier -> ID .)


state 11

    (3) StatementList -> StatementList Statement .

    DCL             reduce using rule 3 (StatementList -> StatementList Statement .)
    $end            reduce using rule 3 (StatementList -> StatementList Statement .)


state 12

    (5) DeclarationStatement -> DCL DeclaratioList SEMICOLON .

    DCL             reduce using rule 5 (DeclarationStatement -> DCL DeclaratioList SEMICOLON .)
    $end            reduce using rule 5 (DeclarationStatement -> DCL DeclaratioList SEMICOLON .)


state 13

    (6) DeclaratioList -> DeclaratioList COMMA . Declaration
    (8) Declaration -> . IdentifierList Mode
    (9) Declaration -> . IdentifierList Mode Initialization
    (10) IdentifierList -> . IdentifierList COMMA Identifier
    (11) IdentifierList -> . Identifier
    (12) Identifier -> . ID

    ID              shift and go to state 10

    Declaration                    shift and go to state 21
    IdentifierList                 shift and go to state 8
    Identifier                     shift and go to state 9

state 14

    (17) DiscreteMode -> CHAR .

    ATRIB           reduce using rule 17 (DiscreteMode -> CHAR .)
    SEMICOLON       reduce using rule 17 (DiscreteMode -> CHAR .)
    COMMA           reduce using rule 17 (DiscreteMode -> CHAR .)


state 15

    (13) Mode -> ID .

    ATRIB           reduce using rule 13 (Mode -> ID .)
    SEMICOLON       reduce using rule 13 (Mode -> ID .)
    COMMA           reduce using rule 13 (Mode -> ID .)


state 16

    (15) DiscreteMode -> INT .

    ATRIB           reduce using rule 15 (DiscreteMode -> INT .)
    SEMICOLON       reduce using rule 15 (DiscreteMode -> INT .)
    COMMA           reduce using rule 15 (DiscreteMode -> INT .)


state 17

    (16) DiscreteMode -> BOOL .

    ATRIB           reduce using rule 16 (DiscreteMode -> BOOL .)
    SEMICOLON       reduce using rule 16 (DiscreteMode -> BOOL .)
    COMMA           reduce using rule 16 (DiscreteMode -> BOOL .)


state 18

    (10) IdentifierList -> IdentifierList COMMA . Identifier
    (12) Identifier -> . ID

    ID              shift and go to state 10

    Identifier                     shift and go to state 22

state 19

    (8) Declaration -> IdentifierList Mode .
    (9) Declaration -> IdentifierList Mode . Initialization
    (18) Initialization -> . ATRIB Expression

    SEMICOLON       reduce using rule 8 (Declaration -> IdentifierList Mode .)
    COMMA           reduce using rule 8 (Declaration -> IdentifierList Mode .)
    ATRIB           shift and go to state 23

    Initialization                 shift and go to state 24

state 20

    (14) Mode -> DiscreteMode .

    ATRIB           reduce using rule 14 (Mode -> DiscreteMode .)
    SEMICOLON       reduce using rule 14 (Mode -> DiscreteMode .)
    COMMA           reduce using rule 14 (Mode -> DiscreteMode .)


state 21

    (6) DeclaratioList -> DeclaratioList COMMA Declaration .

    SEMICOLON       reduce using rule 6 (DeclaratioList -> DeclaratioList COMMA Declaration .)
    COMMA           reduce using rule 6 (DeclaratioList -> DeclaratioList COMMA Declaration .)


state 22

    (10) IdentifierList -> IdentifierList COMMA Identifier .

    COMMA           reduce using rule 10 (IdentifierList -> IdentifierList COMMA Identifier .)
    ID              reduce using rule 10 (IdentifierList -> IdentifierList COMMA Identifier .)
    INT             reduce using rule 10 (IdentifierList -> IdentifierList COMMA Identifier .)
    BOOL            reduce using rule 10 (IdentifierList -> IdentifierList COMMA Identifier .)
    CHAR            reduce using rule 10 (IdentifierList -> IdentifierList COMMA Identifier .)


state 23

    (18) Initialization -> ATRIB . Expression
    (19) Expression -> . Operand0
    (20) Operand0 -> . Operand1
    (21) Operand0 -> . Operand0 Operator1 Operand1
    (22) Operand1 -> . Operand2
    (23) Operand1 -> . Operand1 Operator2 Operand2
    (24) Operand2 -> . Operand3
    (25) Operand2 -> . Operand2 MUL Operand3
    (26) Operand2 -> . Operand2 DIV Operand3
    (27) Operand2 -> . Operand2 MOD Operand3
    (28) Operand3 -> . MINUS Operand4
    (29) Operand3 -> . NOT Operand4
    (30) Operand3 -> . ICONST

    MINUS           shift and go to state 25
    NOT             shift and go to state 26
    ICONST          shift and go to state 27

    Operand2                       shift and go to state 30
    Operand1                       shift and go to state 28
    Operand3                       shift and go to state 29
    Expression                     shift and go to state 31
    Operand0                       shift and go to state 32

state 24

    (9) Declaration -> IdentifierList Mode Initialization .

    SEMICOLON       reduce using rule 9 (Declaration -> IdentifierList Mode Initialization .)
    COMMA           reduce using rule 9 (Declaration -> IdentifierList Mode Initialization .)


state 25

    (28) Operand3 -> MINUS . Operand4
    (31) Operand4 -> . PrimitiveValue
    (32) PrimitiveValue -> . Literal
    (33) Literal -> . ICONST
    (34) Literal -> . FALSE
    (35) Literal -> . TRUE
    (36) Literal -> . CHALIT
    (37) Literal -> . NULL
    (38) Literal -> . STR

    ICONST          shift and go to state 37
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36
    CHALIT          shift and go to state 40
    NULL            shift and go to state 38
    STR             shift and go to state 34

    PrimitiveValue                 shift and go to state 33
    Operand4                       shift and go to state 39
    Literal                        shift and go to state 41

state 26

    (29) Operand3 -> NOT . Operand4
    (31) Operand4 -> . PrimitiveValue
    (32) PrimitiveValue -> . Literal
    (33) Literal -> . ICONST
    (34) Literal -> . FALSE
    (35) Literal -> . TRUE
    (36) Literal -> . CHALIT
    (37) Literal -> . NULL
    (38) Literal -> . STR

    ICONST          shift and go to state 37
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36
    CHALIT          shift and go to state 40
    NULL            shift and go to state 38
    STR             shift and go to state 34

    PrimitiveValue                 shift and go to state 33
    Operand4                       shift and go to state 42
    Literal                        shift and go to state 41

state 27

    (30) Operand3 -> ICONST .

    MUL             reduce using rule 30 (Operand3 -> ICONST .)
    DIV             reduce using rule 30 (Operand3 -> ICONST .)
    MOD             reduce using rule 30 (Operand3 -> ICONST .)
    PLUS            reduce using rule 30 (Operand3 -> ICONST .)
    STRCAT          reduce using rule 30 (Operand3 -> ICONST .)
    MINUS           reduce using rule 30 (Operand3 -> ICONST .)
    IN              reduce using rule 30 (Operand3 -> ICONST .)
    AND             reduce using rule 30 (Operand3 -> ICONST .)
    OR              reduce using rule 30 (Operand3 -> ICONST .)
    EQUAL           reduce using rule 30 (Operand3 -> ICONST .)
    NEQUAL          reduce using rule 30 (Operand3 -> ICONST .)
    MORETHEN        reduce using rule 30 (Operand3 -> ICONST .)
    EQMORETHEN      reduce using rule 30 (Operand3 -> ICONST .)
    LESSTHEN        reduce using rule 30 (Operand3 -> ICONST .)
    EQLESSTHEN      reduce using rule 30 (Operand3 -> ICONST .)
    SEMICOLON       reduce using rule 30 (Operand3 -> ICONST .)
    COMMA           reduce using rule 30 (Operand3 -> ICONST .)


state 28

    (20) Operand0 -> Operand1 .
    (23) Operand1 -> Operand1 . Operator2 Operand2
    (49) Operator2 -> . PLUS
    (50) Operator2 -> . STRCAT
    (51) Operator2 -> . MINUS

    IN              reduce using rule 20 (Operand0 -> Operand1 .)
    AND             reduce using rule 20 (Operand0 -> Operand1 .)
    OR              reduce using rule 20 (Operand0 -> Operand1 .)
    EQUAL           reduce using rule 20 (Operand0 -> Operand1 .)
    NEQUAL          reduce using rule 20 (Operand0 -> Operand1 .)
    MORETHEN        reduce using rule 20 (Operand0 -> Operand1 .)
    EQMORETHEN      reduce using rule 20 (Operand0 -> Operand1 .)
    LESSTHEN        reduce using rule 20 (Operand0 -> Operand1 .)
    EQLESSTHEN      reduce using rule 20 (Operand0 -> Operand1 .)
    SEMICOLON       reduce using rule 20 (Operand0 -> Operand1 .)
    COMMA           reduce using rule 20 (Operand0 -> Operand1 .)
    PLUS            shift and go to state 46
    STRCAT          shift and go to state 45
    MINUS           shift and go to state 43

    Operator2                      shift and go to state 44

state 29

    (24) Operand2 -> Operand3 .

    MUL             reduce using rule 24 (Operand2 -> Operand3 .)
    DIV             reduce using rule 24 (Operand2 -> Operand3 .)
    MOD             reduce using rule 24 (Operand2 -> Operand3 .)
    PLUS            reduce using rule 24 (Operand2 -> Operand3 .)
    STRCAT          reduce using rule 24 (Operand2 -> Operand3 .)
    MINUS           reduce using rule 24 (Operand2 -> Operand3 .)
    IN              reduce using rule 24 (Operand2 -> Operand3 .)
    AND             reduce using rule 24 (Operand2 -> Operand3 .)
    OR              reduce using rule 24 (Operand2 -> Operand3 .)
    EQUAL           reduce using rule 24 (Operand2 -> Operand3 .)
    NEQUAL          reduce using rule 24 (Operand2 -> Operand3 .)
    MORETHEN        reduce using rule 24 (Operand2 -> Operand3 .)
    EQMORETHEN      reduce using rule 24 (Operand2 -> Operand3 .)
    LESSTHEN        reduce using rule 24 (Operand2 -> Operand3 .)
    EQLESSTHEN      reduce using rule 24 (Operand2 -> Operand3 .)
    SEMICOLON       reduce using rule 24 (Operand2 -> Operand3 .)
    COMMA           reduce using rule 24 (Operand2 -> Operand3 .)


state 30

    (22) Operand1 -> Operand2 .
    (25) Operand2 -> Operand2 . MUL Operand3
    (26) Operand2 -> Operand2 . DIV Operand3
    (27) Operand2 -> Operand2 . MOD Operand3

    PLUS            reduce using rule 22 (Operand1 -> Operand2 .)
    STRCAT          reduce using rule 22 (Operand1 -> Operand2 .)
    MINUS           reduce using rule 22 (Operand1 -> Operand2 .)
    IN              reduce using rule 22 (Operand1 -> Operand2 .)
    AND             reduce using rule 22 (Operand1 -> Operand2 .)
    OR              reduce using rule 22 (Operand1 -> Operand2 .)
    EQUAL           reduce using rule 22 (Operand1 -> Operand2 .)
    NEQUAL          reduce using rule 22 (Operand1 -> Operand2 .)
    MORETHEN        reduce using rule 22 (Operand1 -> Operand2 .)
    EQMORETHEN      reduce using rule 22 (Operand1 -> Operand2 .)
    LESSTHEN        reduce using rule 22 (Operand1 -> Operand2 .)
    EQLESSTHEN      reduce using rule 22 (Operand1 -> Operand2 .)
    SEMICOLON       reduce using rule 22 (Operand1 -> Operand2 .)
    COMMA           reduce using rule 22 (Operand1 -> Operand2 .)
    MUL             shift and go to state 49
    DIV             shift and go to state 48
    MOD             shift and go to state 47


state 31

    (18) Initialization -> ATRIB Expression .

    SEMICOLON       reduce using rule 18 (Initialization -> ATRIB Expression .)
    COMMA           reduce using rule 18 (Initialization -> ATRIB Expression .)


state 32

    (19) Expression -> Operand0 .
    (21) Operand0 -> Operand0 . Operator1 Operand1
    (39) Operator1 -> . RelationalOperator
    (40) Operator1 -> . IN
    (41) RelationalOperator -> . AND
    (42) RelationalOperator -> . OR
    (43) RelationalOperator -> . EQUAL
    (44) RelationalOperator -> . NEQUAL
    (45) RelationalOperator -> . MORETHEN
    (46) RelationalOperator -> . EQMORETHEN
    (47) RelationalOperator -> . LESSTHEN
    (48) RelationalOperator -> . EQLESSTHEN

    SEMICOLON       reduce using rule 19 (Expression -> Operand0 .)
    COMMA           reduce using rule 19 (Expression -> Operand0 .)
    IN              shift and go to state 51
    AND             shift and go to state 58
    OR              shift and go to state 57
    EQUAL           shift and go to state 56
    NEQUAL          shift and go to state 55
    MORETHEN        shift and go to state 54
    EQMORETHEN      shift and go to state 59
    LESSTHEN        shift and go to state 52
    EQLESSTHEN      shift and go to state 50

    RelationalOperator             shift and go to state 53
    Operator1                      shift and go to state 60

state 33

    (31) Operand4 -> PrimitiveValue .

    MUL             reduce using rule 31 (Operand4 -> PrimitiveValue .)
    DIV             reduce using rule 31 (Operand4 -> PrimitiveValue .)
    MOD             reduce using rule 31 (Operand4 -> PrimitiveValue .)
    PLUS            reduce using rule 31 (Operand4 -> PrimitiveValue .)
    STRCAT          reduce using rule 31 (Operand4 -> PrimitiveValue .)
    MINUS           reduce using rule 31 (Operand4 -> PrimitiveValue .)
    IN              reduce using rule 31 (Operand4 -> PrimitiveValue .)
    AND             reduce using rule 31 (Operand4 -> PrimitiveValue .)
    OR              reduce using rule 31 (Operand4 -> PrimitiveValue .)
    EQUAL           reduce using rule 31 (Operand4 -> PrimitiveValue .)
    NEQUAL          reduce using rule 31 (Operand4 -> PrimitiveValue .)
    MORETHEN        reduce using rule 31 (Operand4 -> PrimitiveValue .)
    EQMORETHEN      reduce using rule 31 (Operand4 -> PrimitiveValue .)
    LESSTHEN        reduce using rule 31 (Operand4 -> PrimitiveValue .)
    EQLESSTHEN      reduce using rule 31 (Operand4 -> PrimitiveValue .)
    SEMICOLON       reduce using rule 31 (Operand4 -> PrimitiveValue .)
    COMMA           reduce using rule 31 (Operand4 -> PrimitiveValue .)


state 34

    (38) Literal -> STR .

    MUL             reduce using rule 38 (Literal -> STR .)
    DIV             reduce using rule 38 (Literal -> STR .)
    MOD             reduce using rule 38 (Literal -> STR .)
    PLUS            reduce using rule 38 (Literal -> STR .)
    STRCAT          reduce using rule 38 (Literal -> STR .)
    MINUS           reduce using rule 38 (Literal -> STR .)
    IN              reduce using rule 38 (Literal -> STR .)
    AND             reduce using rule 38 (Literal -> STR .)
    OR              reduce using rule 38 (Literal -> STR .)
    EQUAL           reduce using rule 38 (Literal -> STR .)
    NEQUAL          reduce using rule 38 (Literal -> STR .)
    MORETHEN        reduce using rule 38 (Literal -> STR .)
    EQMORETHEN      reduce using rule 38 (Literal -> STR .)
    LESSTHEN        reduce using rule 38 (Literal -> STR .)
    EQLESSTHEN      reduce using rule 38 (Literal -> STR .)
    SEMICOLON       reduce using rule 38 (Literal -> STR .)
    COMMA           reduce using rule 38 (Literal -> STR .)


state 35

    (34) Literal -> FALSE .

    MUL             reduce using rule 34 (Literal -> FALSE .)
    DIV             reduce using rule 34 (Literal -> FALSE .)
    MOD             reduce using rule 34 (Literal -> FALSE .)
    PLUS            reduce using rule 34 (Literal -> FALSE .)
    STRCAT          reduce using rule 34 (Literal -> FALSE .)
    MINUS           reduce using rule 34 (Literal -> FALSE .)
    IN              reduce using rule 34 (Literal -> FALSE .)
    AND             reduce using rule 34 (Literal -> FALSE .)
    OR              reduce using rule 34 (Literal -> FALSE .)
    EQUAL           reduce using rule 34 (Literal -> FALSE .)
    NEQUAL          reduce using rule 34 (Literal -> FALSE .)
    MORETHEN        reduce using rule 34 (Literal -> FALSE .)
    EQMORETHEN      reduce using rule 34 (Literal -> FALSE .)
    LESSTHEN        reduce using rule 34 (Literal -> FALSE .)
    EQLESSTHEN      reduce using rule 34 (Literal -> FALSE .)
    SEMICOLON       reduce using rule 34 (Literal -> FALSE .)
    COMMA           reduce using rule 34 (Literal -> FALSE .)


state 36

    (35) Literal -> TRUE .

    MUL             reduce using rule 35 (Literal -> TRUE .)
    DIV             reduce using rule 35 (Literal -> TRUE .)
    MOD             reduce using rule 35 (Literal -> TRUE .)
    PLUS            reduce using rule 35 (Literal -> TRUE .)
    STRCAT          reduce using rule 35 (Literal -> TRUE .)
    MINUS           reduce using rule 35 (Literal -> TRUE .)
    IN              reduce using rule 35 (Literal -> TRUE .)
    AND             reduce using rule 35 (Literal -> TRUE .)
    OR              reduce using rule 35 (Literal -> TRUE .)
    EQUAL           reduce using rule 35 (Literal -> TRUE .)
    NEQUAL          reduce using rule 35 (Literal -> TRUE .)
    MORETHEN        reduce using rule 35 (Literal -> TRUE .)
    EQMORETHEN      reduce using rule 35 (Literal -> TRUE .)
    LESSTHEN        reduce using rule 35 (Literal -> TRUE .)
    EQLESSTHEN      reduce using rule 35 (Literal -> TRUE .)
    SEMICOLON       reduce using rule 35 (Literal -> TRUE .)
    COMMA           reduce using rule 35 (Literal -> TRUE .)


state 37

    (33) Literal -> ICONST .

    MUL             reduce using rule 33 (Literal -> ICONST .)
    DIV             reduce using rule 33 (Literal -> ICONST .)
    MOD             reduce using rule 33 (Literal -> ICONST .)
    PLUS            reduce using rule 33 (Literal -> ICONST .)
    STRCAT          reduce using rule 33 (Literal -> ICONST .)
    MINUS           reduce using rule 33 (Literal -> ICONST .)
    IN              reduce using rule 33 (Literal -> ICONST .)
    AND             reduce using rule 33 (Literal -> ICONST .)
    OR              reduce using rule 33 (Literal -> ICONST .)
    EQUAL           reduce using rule 33 (Literal -> ICONST .)
    NEQUAL          reduce using rule 33 (Literal -> ICONST .)
    MORETHEN        reduce using rule 33 (Literal -> ICONST .)
    EQMORETHEN      reduce using rule 33 (Literal -> ICONST .)
    LESSTHEN        reduce using rule 33 (Literal -> ICONST .)
    EQLESSTHEN      reduce using rule 33 (Literal -> ICONST .)
    SEMICOLON       reduce using rule 33 (Literal -> ICONST .)
    COMMA           reduce using rule 33 (Literal -> ICONST .)


state 38

    (37) Literal -> NULL .

    MUL             reduce using rule 37 (Literal -> NULL .)
    DIV             reduce using rule 37 (Literal -> NULL .)
    MOD             reduce using rule 37 (Literal -> NULL .)
    PLUS            reduce using rule 37 (Literal -> NULL .)
    STRCAT          reduce using rule 37 (Literal -> NULL .)
    MINUS           reduce using rule 37 (Literal -> NULL .)
    IN              reduce using rule 37 (Literal -> NULL .)
    AND             reduce using rule 37 (Literal -> NULL .)
    OR              reduce using rule 37 (Literal -> NULL .)
    EQUAL           reduce using rule 37 (Literal -> NULL .)
    NEQUAL          reduce using rule 37 (Literal -> NULL .)
    MORETHEN        reduce using rule 37 (Literal -> NULL .)
    EQMORETHEN      reduce using rule 37 (Literal -> NULL .)
    LESSTHEN        reduce using rule 37 (Literal -> NULL .)
    EQLESSTHEN      reduce using rule 37 (Literal -> NULL .)
    SEMICOLON       reduce using rule 37 (Literal -> NULL .)
    COMMA           reduce using rule 37 (Literal -> NULL .)


state 39

    (28) Operand3 -> MINUS Operand4 .

    MUL             reduce using rule 28 (Operand3 -> MINUS Operand4 .)
    DIV             reduce using rule 28 (Operand3 -> MINUS Operand4 .)
    MOD             reduce using rule 28 (Operand3 -> MINUS Operand4 .)
    PLUS            reduce using rule 28 (Operand3 -> MINUS Operand4 .)
    STRCAT          reduce using rule 28 (Operand3 -> MINUS Operand4 .)
    MINUS           reduce using rule 28 (Operand3 -> MINUS Operand4 .)
    IN              reduce using rule 28 (Operand3 -> MINUS Operand4 .)
    AND             reduce using rule 28 (Operand3 -> MINUS Operand4 .)
    OR              reduce using rule 28 (Operand3 -> MINUS Operand4 .)
    EQUAL           reduce using rule 28 (Operand3 -> MINUS Operand4 .)
    NEQUAL          reduce using rule 28 (Operand3 -> MINUS Operand4 .)
    MORETHEN        reduce using rule 28 (Operand3 -> MINUS Operand4 .)
    EQMORETHEN      reduce using rule 28 (Operand3 -> MINUS Operand4 .)
    LESSTHEN        reduce using rule 28 (Operand3 -> MINUS Operand4 .)
    EQLESSTHEN      reduce using rule 28 (Operand3 -> MINUS Operand4 .)
    SEMICOLON       reduce using rule 28 (Operand3 -> MINUS Operand4 .)
    COMMA           reduce using rule 28 (Operand3 -> MINUS Operand4 .)


state 40

    (36) Literal -> CHALIT .

    MUL             reduce using rule 36 (Literal -> CHALIT .)
    DIV             reduce using rule 36 (Literal -> CHALIT .)
    MOD             reduce using rule 36 (Literal -> CHALIT .)
    PLUS            reduce using rule 36 (Literal -> CHALIT .)
    STRCAT          reduce using rule 36 (Literal -> CHALIT .)
    MINUS           reduce using rule 36 (Literal -> CHALIT .)
    IN              reduce using rule 36 (Literal -> CHALIT .)
    AND             reduce using rule 36 (Literal -> CHALIT .)
    OR              reduce using rule 36 (Literal -> CHALIT .)
    EQUAL           reduce using rule 36 (Literal -> CHALIT .)
    NEQUAL          reduce using rule 36 (Literal -> CHALIT .)
    MORETHEN        reduce using rule 36 (Literal -> CHALIT .)
    EQMORETHEN      reduce using rule 36 (Literal -> CHALIT .)
    LESSTHEN        reduce using rule 36 (Literal -> CHALIT .)
    EQLESSTHEN      reduce using rule 36 (Literal -> CHALIT .)
    SEMICOLON       reduce using rule 36 (Literal -> CHALIT .)
    COMMA           reduce using rule 36 (Literal -> CHALIT .)


state 41

    (32) PrimitiveValue -> Literal .

    MUL             reduce using rule 32 (PrimitiveValue -> Literal .)
    DIV             reduce using rule 32 (PrimitiveValue -> Literal .)
    MOD             reduce using rule 32 (PrimitiveValue -> Literal .)
    PLUS            reduce using rule 32 (PrimitiveValue -> Literal .)
    STRCAT          reduce using rule 32 (PrimitiveValue -> Literal .)
    MINUS           reduce using rule 32 (PrimitiveValue -> Literal .)
    IN              reduce using rule 32 (PrimitiveValue -> Literal .)
    AND             reduce using rule 32 (PrimitiveValue -> Literal .)
    OR              reduce using rule 32 (PrimitiveValue -> Literal .)
    EQUAL           reduce using rule 32 (PrimitiveValue -> Literal .)
    NEQUAL          reduce using rule 32 (PrimitiveValue -> Literal .)
    MORETHEN        reduce using rule 32 (PrimitiveValue -> Literal .)
    EQMORETHEN      reduce using rule 32 (PrimitiveValue -> Literal .)
    LESSTHEN        reduce using rule 32 (PrimitiveValue -> Literal .)
    EQLESSTHEN      reduce using rule 32 (PrimitiveValue -> Literal .)
    SEMICOLON       reduce using rule 32 (PrimitiveValue -> Literal .)
    COMMA           reduce using rule 32 (PrimitiveValue -> Literal .)


state 42

    (29) Operand3 -> NOT Operand4 .

    MUL             reduce using rule 29 (Operand3 -> NOT Operand4 .)
    DIV             reduce using rule 29 (Operand3 -> NOT Operand4 .)
    MOD             reduce using rule 29 (Operand3 -> NOT Operand4 .)
    PLUS            reduce using rule 29 (Operand3 -> NOT Operand4 .)
    STRCAT          reduce using rule 29 (Operand3 -> NOT Operand4 .)
    MINUS           reduce using rule 29 (Operand3 -> NOT Operand4 .)
    IN              reduce using rule 29 (Operand3 -> NOT Operand4 .)
    AND             reduce using rule 29 (Operand3 -> NOT Operand4 .)
    OR              reduce using rule 29 (Operand3 -> NOT Operand4 .)
    EQUAL           reduce using rule 29 (Operand3 -> NOT Operand4 .)
    NEQUAL          reduce using rule 29 (Operand3 -> NOT Operand4 .)
    MORETHEN        reduce using rule 29 (Operand3 -> NOT Operand4 .)
    EQMORETHEN      reduce using rule 29 (Operand3 -> NOT Operand4 .)
    LESSTHEN        reduce using rule 29 (Operand3 -> NOT Operand4 .)
    EQLESSTHEN      reduce using rule 29 (Operand3 -> NOT Operand4 .)
    SEMICOLON       reduce using rule 29 (Operand3 -> NOT Operand4 .)
    COMMA           reduce using rule 29 (Operand3 -> NOT Operand4 .)


state 43

    (51) Operator2 -> MINUS .

    MINUS           reduce using rule 51 (Operator2 -> MINUS .)
    NOT             reduce using rule 51 (Operator2 -> MINUS .)
    ICONST          reduce using rule 51 (Operator2 -> MINUS .)


state 44

    (23) Operand1 -> Operand1 Operator2 . Operand2
    (24) Operand2 -> . Operand3
    (25) Operand2 -> . Operand2 MUL Operand3
    (26) Operand2 -> . Operand2 DIV Operand3
    (27) Operand2 -> . Operand2 MOD Operand3
    (28) Operand3 -> . MINUS Operand4
    (29) Operand3 -> . NOT Operand4
    (30) Operand3 -> . ICONST

    MINUS           shift and go to state 25
    NOT             shift and go to state 26
    ICONST          shift and go to state 27

    Operand2                       shift and go to state 61
    Operand3                       shift and go to state 29

state 45

    (50) Operator2 -> STRCAT .

    MINUS           reduce using rule 50 (Operator2 -> STRCAT .)
    NOT             reduce using rule 50 (Operator2 -> STRCAT .)
    ICONST          reduce using rule 50 (Operator2 -> STRCAT .)


state 46

    (49) Operator2 -> PLUS .

    MINUS           reduce using rule 49 (Operator2 -> PLUS .)
    NOT             reduce using rule 49 (Operator2 -> PLUS .)
    ICONST          reduce using rule 49 (Operator2 -> PLUS .)


state 47

    (27) Operand2 -> Operand2 MOD . Operand3
    (28) Operand3 -> . MINUS Operand4
    (29) Operand3 -> . NOT Operand4
    (30) Operand3 -> . ICONST

    MINUS           shift and go to state 25
    NOT             shift and go to state 26
    ICONST          shift and go to state 27

    Operand3                       shift and go to state 62

state 48

    (26) Operand2 -> Operand2 DIV . Operand3
    (28) Operand3 -> . MINUS Operand4
    (29) Operand3 -> . NOT Operand4
    (30) Operand3 -> . ICONST

    MINUS           shift and go to state 25
    NOT             shift and go to state 26
    ICONST          shift and go to state 27

    Operand3                       shift and go to state 63

state 49

    (25) Operand2 -> Operand2 MUL . Operand3
    (28) Operand3 -> . MINUS Operand4
    (29) Operand3 -> . NOT Operand4
    (30) Operand3 -> . ICONST

    MINUS           shift and go to state 25
    NOT             shift and go to state 26
    ICONST          shift and go to state 27

    Operand3                       shift and go to state 64

state 50

    (48) RelationalOperator -> EQLESSTHEN .

    MINUS           reduce using rule 48 (RelationalOperator -> EQLESSTHEN .)
    NOT             reduce using rule 48 (RelationalOperator -> EQLESSTHEN .)
    ICONST          reduce using rule 48 (RelationalOperator -> EQLESSTHEN .)


state 51

    (40) Operator1 -> IN .

    MINUS           reduce using rule 40 (Operator1 -> IN .)
    NOT             reduce using rule 40 (Operator1 -> IN .)
    ICONST          reduce using rule 40 (Operator1 -> IN .)


state 52

    (47) RelationalOperator -> LESSTHEN .

    MINUS           reduce using rule 47 (RelationalOperator -> LESSTHEN .)
    NOT             reduce using rule 47 (RelationalOperator -> LESSTHEN .)
    ICONST          reduce using rule 47 (RelationalOperator -> LESSTHEN .)


state 53

    (39) Operator1 -> RelationalOperator .

    MINUS           reduce using rule 39 (Operator1 -> RelationalOperator .)
    NOT             reduce using rule 39 (Operator1 -> RelationalOperator .)
    ICONST          reduce using rule 39 (Operator1 -> RelationalOperator .)


state 54

    (45) RelationalOperator -> MORETHEN .

    MINUS           reduce using rule 45 (RelationalOperator -> MORETHEN .)
    NOT             reduce using rule 45 (RelationalOperator -> MORETHEN .)
    ICONST          reduce using rule 45 (RelationalOperator -> MORETHEN .)


state 55

    (44) RelationalOperator -> NEQUAL .

    MINUS           reduce using rule 44 (RelationalOperator -> NEQUAL .)
    NOT             reduce using rule 44 (RelationalOperator -> NEQUAL .)
    ICONST          reduce using rule 44 (RelationalOperator -> NEQUAL .)


state 56

    (43) RelationalOperator -> EQUAL .

    MINUS           reduce using rule 43 (RelationalOperator -> EQUAL .)
    NOT             reduce using rule 43 (RelationalOperator -> EQUAL .)
    ICONST          reduce using rule 43 (RelationalOperator -> EQUAL .)


state 57

    (42) RelationalOperator -> OR .

    MINUS           reduce using rule 42 (RelationalOperator -> OR .)
    NOT             reduce using rule 42 (RelationalOperator -> OR .)
    ICONST          reduce using rule 42 (RelationalOperator -> OR .)


state 58

    (41) RelationalOperator -> AND .

    MINUS           reduce using rule 41 (RelationalOperator -> AND .)
    NOT             reduce using rule 41 (RelationalOperator -> AND .)
    ICONST          reduce using rule 41 (RelationalOperator -> AND .)


state 59

    (46) RelationalOperator -> EQMORETHEN .

    MINUS           reduce using rule 46 (RelationalOperator -> EQMORETHEN .)
    NOT             reduce using rule 46 (RelationalOperator -> EQMORETHEN .)
    ICONST          reduce using rule 46 (RelationalOperator -> EQMORETHEN .)


state 60

    (21) Operand0 -> Operand0 Operator1 . Operand1
    (22) Operand1 -> . Operand2
    (23) Operand1 -> . Operand1 Operator2 Operand2
    (24) Operand2 -> . Operand3
    (25) Operand2 -> . Operand2 MUL Operand3
    (26) Operand2 -> . Operand2 DIV Operand3
    (27) Operand2 -> . Operand2 MOD Operand3
    (28) Operand3 -> . MINUS Operand4
    (29) Operand3 -> . NOT Operand4
    (30) Operand3 -> . ICONST

    MINUS           shift and go to state 25
    NOT             shift and go to state 26
    ICONST          shift and go to state 27

    Operand2                       shift and go to state 30
    Operand1                       shift and go to state 65
    Operand3                       shift and go to state 29

state 61

    (23) Operand1 -> Operand1 Operator2 Operand2 .
    (25) Operand2 -> Operand2 . MUL Operand3
    (26) Operand2 -> Operand2 . DIV Operand3
    (27) Operand2 -> Operand2 . MOD Operand3

    PLUS            reduce using rule 23 (Operand1 -> Operand1 Operator2 Operand2 .)
    STRCAT          reduce using rule 23 (Operand1 -> Operand1 Operator2 Operand2 .)
    MINUS           reduce using rule 23 (Operand1 -> Operand1 Operator2 Operand2 .)
    IN              reduce using rule 23 (Operand1 -> Operand1 Operator2 Operand2 .)
    AND             reduce using rule 23 (Operand1 -> Operand1 Operator2 Operand2 .)
    OR              reduce using rule 23 (Operand1 -> Operand1 Operator2 Operand2 .)
    EQUAL           reduce using rule 23 (Operand1 -> Operand1 Operator2 Operand2 .)
    NEQUAL          reduce using rule 23 (Operand1 -> Operand1 Operator2 Operand2 .)
    MORETHEN        reduce using rule 23 (Operand1 -> Operand1 Operator2 Operand2 .)
    EQMORETHEN      reduce using rule 23 (Operand1 -> Operand1 Operator2 Operand2 .)
    LESSTHEN        reduce using rule 23 (Operand1 -> Operand1 Operator2 Operand2 .)
    EQLESSTHEN      reduce using rule 23 (Operand1 -> Operand1 Operator2 Operand2 .)
    SEMICOLON       reduce using rule 23 (Operand1 -> Operand1 Operator2 Operand2 .)
    COMMA           reduce using rule 23 (Operand1 -> Operand1 Operator2 Operand2 .)
    MUL             shift and go to state 49
    DIV             shift and go to state 48
    MOD             shift and go to state 47


state 62

    (27) Operand2 -> Operand2 MOD Operand3 .

    MUL             reduce using rule 27 (Operand2 -> Operand2 MOD Operand3 .)
    DIV             reduce using rule 27 (Operand2 -> Operand2 MOD Operand3 .)
    MOD             reduce using rule 27 (Operand2 -> Operand2 MOD Operand3 .)
    PLUS            reduce using rule 27 (Operand2 -> Operand2 MOD Operand3 .)
    STRCAT          reduce using rule 27 (Operand2 -> Operand2 MOD Operand3 .)
    MINUS           reduce using rule 27 (Operand2 -> Operand2 MOD Operand3 .)
    IN              reduce using rule 27 (Operand2 -> Operand2 MOD Operand3 .)
    AND             reduce using rule 27 (Operand2 -> Operand2 MOD Operand3 .)
    OR              reduce using rule 27 (Operand2 -> Operand2 MOD Operand3 .)
    EQUAL           reduce using rule 27 (Operand2 -> Operand2 MOD Operand3 .)
    NEQUAL          reduce using rule 27 (Operand2 -> Operand2 MOD Operand3 .)
    MORETHEN        reduce using rule 27 (Operand2 -> Operand2 MOD Operand3 .)
    EQMORETHEN      reduce using rule 27 (Operand2 -> Operand2 MOD Operand3 .)
    LESSTHEN        reduce using rule 27 (Operand2 -> Operand2 MOD Operand3 .)
    EQLESSTHEN      reduce using rule 27 (Operand2 -> Operand2 MOD Operand3 .)
    SEMICOLON       reduce using rule 27 (Operand2 -> Operand2 MOD Operand3 .)
    COMMA           reduce using rule 27 (Operand2 -> Operand2 MOD Operand3 .)


state 63

    (26) Operand2 -> Operand2 DIV Operand3 .

    MUL             reduce using rule 26 (Operand2 -> Operand2 DIV Operand3 .)
    DIV             reduce using rule 26 (Operand2 -> Operand2 DIV Operand3 .)
    MOD             reduce using rule 26 (Operand2 -> Operand2 DIV Operand3 .)
    PLUS            reduce using rule 26 (Operand2 -> Operand2 DIV Operand3 .)
    STRCAT          reduce using rule 26 (Operand2 -> Operand2 DIV Operand3 .)
    MINUS           reduce using rule 26 (Operand2 -> Operand2 DIV Operand3 .)
    IN              reduce using rule 26 (Operand2 -> Operand2 DIV Operand3 .)
    AND             reduce using rule 26 (Operand2 -> Operand2 DIV Operand3 .)
    OR              reduce using rule 26 (Operand2 -> Operand2 DIV Operand3 .)
    EQUAL           reduce using rule 26 (Operand2 -> Operand2 DIV Operand3 .)
    NEQUAL          reduce using rule 26 (Operand2 -> Operand2 DIV Operand3 .)
    MORETHEN        reduce using rule 26 (Operand2 -> Operand2 DIV Operand3 .)
    EQMORETHEN      reduce using rule 26 (Operand2 -> Operand2 DIV Operand3 .)
    LESSTHEN        reduce using rule 26 (Operand2 -> Operand2 DIV Operand3 .)
    EQLESSTHEN      reduce using rule 26 (Operand2 -> Operand2 DIV Operand3 .)
    SEMICOLON       reduce using rule 26 (Operand2 -> Operand2 DIV Operand3 .)
    COMMA           reduce using rule 26 (Operand2 -> Operand2 DIV Operand3 .)


state 64

    (25) Operand2 -> Operand2 MUL Operand3 .

    MUL             reduce using rule 25 (Operand2 -> Operand2 MUL Operand3 .)
    DIV             reduce using rule 25 (Operand2 -> Operand2 MUL Operand3 .)
    MOD             reduce using rule 25 (Operand2 -> Operand2 MUL Operand3 .)
    PLUS            reduce using rule 25 (Operand2 -> Operand2 MUL Operand3 .)
    STRCAT          reduce using rule 25 (Operand2 -> Operand2 MUL Operand3 .)
    MINUS           reduce using rule 25 (Operand2 -> Operand2 MUL Operand3 .)
    IN              reduce using rule 25 (Operand2 -> Operand2 MUL Operand3 .)
    AND             reduce using rule 25 (Operand2 -> Operand2 MUL Operand3 .)
    OR              reduce using rule 25 (Operand2 -> Operand2 MUL Operand3 .)
    EQUAL           reduce using rule 25 (Operand2 -> Operand2 MUL Operand3 .)
    NEQUAL          reduce using rule 25 (Operand2 -> Operand2 MUL Operand3 .)
    MORETHEN        reduce using rule 25 (Operand2 -> Operand2 MUL Operand3 .)
    EQMORETHEN      reduce using rule 25 (Operand2 -> Operand2 MUL Operand3 .)
    LESSTHEN        reduce using rule 25 (Operand2 -> Operand2 MUL Operand3 .)
    EQLESSTHEN      reduce using rule 25 (Operand2 -> Operand2 MUL Operand3 .)
    SEMICOLON       reduce using rule 25 (Operand2 -> Operand2 MUL Operand3 .)
    COMMA           reduce using rule 25 (Operand2 -> Operand2 MUL Operand3 .)


state 65

    (21) Operand0 -> Operand0 Operator1 Operand1 .
    (23) Operand1 -> Operand1 . Operator2 Operand2
    (49) Operator2 -> . PLUS
    (50) Operator2 -> . STRCAT
    (51) Operator2 -> . MINUS

    IN              reduce using rule 21 (Operand0 -> Operand0 Operator1 Operand1 .)
    AND             reduce using rule 21 (Operand0 -> Operand0 Operator1 Operand1 .)
    OR              reduce using rule 21 (Operand0 -> Operand0 Operator1 Operand1 .)
    EQUAL           reduce using rule 21 (Operand0 -> Operand0 Operator1 Operand1 .)
    NEQUAL          reduce using rule 21 (Operand0 -> Operand0 Operator1 Operand1 .)
    MORETHEN        reduce using rule 21 (Operand0 -> Operand0 Operator1 Operand1 .)
    EQMORETHEN      reduce using rule 21 (Operand0 -> Operand0 Operator1 Operand1 .)
    LESSTHEN        reduce using rule 21 (Operand0 -> Operand0 Operator1 Operand1 .)
    EQLESSTHEN      reduce using rule 21 (Operand0 -> Operand0 Operator1 Operand1 .)
    SEMICOLON       reduce using rule 21 (Operand0 -> Operand0 Operator1 Operand1 .)
    COMMA           reduce using rule 21 (Operand0 -> Operand0 Operator1 Operand1 .)
    PLUS            shift and go to state 46
    STRCAT          shift and go to state 45
    MINUS           shift and go to state 43

    Operator2                      shift and go to state 44
